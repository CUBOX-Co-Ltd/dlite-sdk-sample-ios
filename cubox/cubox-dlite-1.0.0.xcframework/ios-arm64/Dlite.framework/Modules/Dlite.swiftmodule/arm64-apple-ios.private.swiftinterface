// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Dlite
import Combine
import CommonCrypto
@_exported import Dlite
import Foundation
import Inferencemodule
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public protocol InitializeCompleteListener {
  func onInitializeComplete(completed: Swift.Bool, errorStatus: Dlite.DliteErrorStatus?)
}
@_hasMissingDesignatedInitializers final public class DliteSdk {
  public static let with: Dlite.DliteSdk
  public static func inference() -> Dlite.ExtractFeatureModule
  final public var faceApi: Dlite.FaceUseCaseFactory? {
    get
    set
  }
  final public var errorPublisher: Combine.AnyPublisher<Dlite.DliteErrorStatus?, Swift.Never> {
    get
  }
  final public var errorStatus: Dlite.DliteErrorStatus? {
    get
  }
  final public func initialize(option: Dlite.DliteOption, completion: @escaping (Swift.Bool, Dlite.DliteErrorStatus?) -> Swift.Void)
  final public func removeLicense()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FaceUseCaseFactory {
  final public func registerFace(image: UIKit.UIImage, faceId: Swift.String) async -> Swift.Result<Dlite.RequestResult<Swift.Bool>, any Swift.Error>
  final public func faceValidation(image: UIKit.UIImage) async -> Swift.Result<Dlite.RequestResult<Swift.String>, any Swift.Error>
  final public func deleteFace(faceId: Swift.String) async -> Swift.Result<Dlite.RequestResult<Swift.Bool>, any Swift.Error>
  final public func checkFaceId(faceId: Swift.String) async -> Swift.Result<Dlite.RequestResult<Swift.Bool>, any Swift.Error>
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ExtractFeatureModule {
  final public func detectFace(_ image: UIKit.UIImage) -> [(CoreFoundation.CGRect, [CoreFoundation.CGPoint])]?
  final public func faceAlignment(_ image: UIKit.UIImage, faceObjectInfo: (CoreFoundation.CGRect, [CoreFoundation.CGPoint]), padRate: Swift.Float = 0.0) -> UIKit.UIImage?
  final public func extractFeature(_ image: UIKit.UIImage) -> [Swift.Float]?
  @objc deinit
}
public enum LogLevel {
  case ALL
  case ERROR
  case INFO
  case NONE
  public static func == (a: Dlite.LogLevel, b: Dlite.LogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct DliteOption {
  public let modules: [Dlite.DliteModule]
  public let faceRecognitionBaseUrl: Swift.String
  public let livenessBaseUrl: Swift.String
  public let siteCode: Swift.String
  public let licenseKey: Swift.String?
  public let logLevel: Dlite.LogLevel
  public struct Builder {
    public init()
    public func setFaceRecognitionBaseUrl(_ url: Swift.String) -> Dlite.DliteOption.Builder
    public func setLivenessBaseUrl(_ url: Swift.String) -> Dlite.DliteOption.Builder
    public func setModules(_ modules: Dlite.DliteModule...) -> Dlite.DliteOption.Builder
    public func setLicenseKey(_ licenseKey: Swift.String) -> Dlite.DliteOption.Builder
    public func setSiteCode(_ siteCode: Swift.String) -> Dlite.DliteOption.Builder
    public func build() -> Dlite.DliteOption
  }
}
public enum DliteRequestErrorStatus : Swift.String {
  case CATCH_EXCEPTION
  case UNKNOWN_ERROR
  case API_REQUEST_FAILED
  case API_RESULT_NOT_SUCCEEDED
  case PERMISSION_DENIED
  case LICENSE_EXPIRED
  case DLITE_INITAILIZE_FAILED
  case FEATURES_CURRENTLY_NOT_SUPPORTED
  case INVALID_ACTIVITY
  case USER_CANCELLED
  case FACE_API_NOT_INITIALIZE
  case INVALID_FEATURE_ERROR
  case INVALID_API_KEY
  case SERVER_DB_ERROR
  case LIVENESS_FAILED_FACE_NOT_FOUND
  case LIVENESS_FAILED_DETECT_MULTIPLE_FACES
  case LIVENESS_FAILED_NO_ACTION
  case LIVENESS_FAILED_DETECT_MASK
  case LIVENESS_FAILED_FRONTAL
  case LIVENESS_SERVER_ERROR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum InferenceModel : Swift.String, Swift.CaseIterable {
  case FACE_EXTRACTION
  public init?(rawValue: Swift.String)
  public typealias AllCases = [Dlite.InferenceModel]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [Dlite.InferenceModel] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum DliteErrorStatus : Swift.Error {
  case INVALID_API_KEY
  case INFERENCE_MODULE_NOT_INCLUDED
  case CAMERA_MODULE_NOT_INCLUDED
  case LICENSE_NEED_DOWNLOAD
  case LICENSE_KEY_ERROR
  case LICENSE_EXPIRED
  case LICENSE_DOWNLOAD_FAILED
  case LICENSE_REFRESHED_FAILED
  case LICENSE_API_FAILED
  case LICENSE_SAVE_FAILED
  case MODEL_DOWNLOAD_SAVE_FAILED
  case UNKNOWN_EXCEPTION
  public static func == (a: Dlite.DliteErrorStatus, b: Dlite.DliteErrorStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DliteModule : Swift.String {
  case inferenceModule
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct RequestResult<T> {
  public let data: T?
  public let message: Swift.String
  public let statusCode: Swift.Int
}
extension Dlite.LogLevel : Swift.Equatable {}
extension Dlite.LogLevel : Swift.Hashable {}
extension Dlite.DliteRequestErrorStatus : Swift.Equatable {}
extension Dlite.DliteRequestErrorStatus : Swift.Hashable {}
extension Dlite.DliteRequestErrorStatus : Swift.RawRepresentable {}
extension Dlite.InferenceModel : Swift.Equatable {}
extension Dlite.InferenceModel : Swift.Hashable {}
extension Dlite.InferenceModel : Swift.RawRepresentable {}
extension Dlite.DliteErrorStatus : Swift.Equatable {}
extension Dlite.DliteErrorStatus : Swift.Hashable {}
extension Dlite.DliteModule : Swift.Equatable {}
extension Dlite.DliteModule : Swift.Hashable {}
extension Dlite.DliteModule : Swift.RawRepresentable {}
